@{
    ViewData["Title"] = "Retro";
}

<div class="container">
    <div class="image-container">
        <img id="originalImage" src="~/images/example-02.jpg" alt="Original Image" />
    </div>
    <div class="video-container">
        <video id="video" autoplay muted></video>
        <img id="capturedUserImage" src="#" alt="Captured Image" style="display: none;" />
    </div>
    <h2 id="prediccion" style="display: none;">Predicción: <span id="resultado"></span></h2>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@tensorflow-models/coco-ssd"></script>

    <script>
        const videoWidth = 640;
        const videoHeight = 480;
        let model;
        let videoElement;
        let lastCaptureTime = 0; // Variable para rastrear el tiempo de la última captura

        async function loadModel() {
            model = await cocoSsd.load();
            console.log("Modelo coco-ssd cargado exitosamente.");
        }

        async function detectObjects() {
            const predictions = await model.detect(videoElement);
            console.log(predictions); // Mostrar todas las predicciones en la consola

            // Verificar si ha pasado al menos 10 segundos desde la última captura y si se detecta una persona
            const currentTime = new Date().getTime();
            if (isPersonDetected(predictions) && (currentTime - lastCaptureTime) >= 10000) {
                snap();
                lastCaptureTime = currentTime; // Actualizar el tiempo de la última captura
            }

            requestAnimationFrame(detectObjects); // Continuar detectando objetos en cada frame
        }

        function isPersonDetected(predictions) {
            const personDetected = predictions.some(prediction => prediction.class === "person");
            if (personDetected) {
                console.log("Persona detectada");
            } else {
                console.log("No se detectó ninguna persona");
            }
            return personDetected;
        }

        function snap() {
            var userImageElement = document.getElementById("capturedUserImage");

            if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
                var canvasElement = document.createElement("canvas");
                var context = canvasElement.getContext("2d");

                if (!context) {
                    console.error("Error al obtener el contexto del canvas.");
                    return;
                }

                canvasElement.width = videoWidth;
                canvasElement.height = videoHeight;

                context.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);

                var imageData = canvasElement.toDataURL('image/jpeg');
                sendForm(imageData);
            } else {
                console.error("Las dimensiones del elemento de video son cero. Verifica si la transmisión de la cámara se cargó correctamente.");
            }
        }

        function sendForm(imageData) {
            var formData = new FormData();
            formData.append("imageData", imageData);

            $.ajax({
                url: '/Retro/CaptureImage',
                type: 'POST',
                processData: false,
                contentType: false,
                data: formData,
                success: function (result) {
                    console.log("Resultado de la predicción recibido del servidor:", result);
                    displayCapturedImage(result);
                },
                error: function (xhr, status, error) {
                    console.error("Error al enviar los datos de la imagen:", error);
                }
            });
        }

        function displayCapturedImage(fileName) {
            var userImageElement = document.getElementById("capturedUserImage");

            // Establece el src de la imagen al archivo capturado
            userImageElement.src = `/images/${fileName}`;
            userImageElement.style.display = 'block';

            console.log("Imagen capturada y mostrada en pantalla.");

            // Mantiene la imagen visible durante 5 segundos antes de ocultarla
            setTimeout(function () {
                userImageElement.style.display = 'none';

                // Vuelve a reproducir el video en tiempo real
                if (videoElement.srcObject) {
                    videoElement.play();
                }
            }, 5000); // 5000 milisegundos = 5 segundos
        }

        function startCamera() {
            videoElement = document.getElementById("video");
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: { width: videoWidth, height: videoHeight } })
                    .then(function (stream) {
                        videoElement.srcObject = stream;
                        videoElement.style.width = videoWidth + 'px';
                        videoElement.style.height = videoHeight + 'px';
                        videoElement.onloadedmetadata = function () {
                            videoElement.play();
                            console.log("Video en reproducción");
                            detectObjects(); // Comenzar la detección de objetos
                        };
                    })
                    .catch(function (error) {
                        console.error("Error al acceder a la cámara:", error);
                    });
            } else {
                console.error("getUserMedia no es compatible en este navegador.");
            }
        }

        window.addEventListener('load', function () {
            loadModel().then(() => {
                startCamera();
            });
        });
    </script>

}


<style>
    .container {
        display: flex;
        justify-content: space-between;
        padding: 20px;
    }

    .image-container,
    .video-container {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .image-container img,
        .video-container video,
        .video-container img {
            width: 100%;
            height: auto;
            max-width: 100%;
            max-height: 100%;
        }

    .video-container {
        position: relative;
    }

        .video-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: 1;
        }
</style>
